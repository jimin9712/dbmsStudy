/*한 줄 주석은 나중에 외부에서 파일 실행 시 오류 터짐*/
/*항상 범위 주석을 사용한다 Ctrl + Shfit + / */
/*항상 범위 주석을 사용한다.*/
/*CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE,
   MEMBER_PASSWORD VARCHAR2(255),
   MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0)
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   MEMBER_ID NUMBER,
   ORDER_DATE DATE DEFAULT CURRENT_TIMESTAMP,
   ORDER_COUNT NUMBER DEFAULT 1,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);*/

/*동물원*/
/*동물*/
/*보통 다 쪽에 FK가 있음*/
/*CREATE TABLE TBL_ZOO(
	ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
	ZOO_NAME VARCHAR2(255),
	ZOO_ADRESS VARCHAR2(255),
	ZOO_MAX_ANIMAL NUMBER DEFAULT 0
);

CREATE TABLE TBL_ANIMAL(
	ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
	ANIMAL_NAME VARCHAR(255),
	ANIMAL_TYPE VARCHAR(255),
	ANIMAL_AGE VARCHAR(255),
	ANIMAL_HEIGHT NUMBER(3,5),
	ANIMAL_WEIGHT NUMBER(3,5),
	ZOO_ID NUMBER,
	CONSTRAINT FK_ANIMALS_ZOO FOREIGN KEY(ZOO_ID)
	REFERENCES TBL_ZOO(ID)
);*/

/*
   회원          주문              상품
   ----------------------------------------
   번호PK       번호PK          번호PK
   ----------------------------------------
   아이디U, NN   날짜NN          이름NN
   비밀번호NN    회원번호FK, NN      가격D=0
   이름NN       상품번호FK, NN      재고D=0
   주소NN
   이메일
   생일
*/
/*
 * 물리적 설계
 * USER
 * -----------------------------------------------------------
 * 	USER_NUMBER : NUMBER CONSTRAINT PK_USER PRIMARY KEY
 * -----------------------------------------------------------
 * 	USER_ID : VARCHAR2(1000):UNIQUE:NOT NULL
 *  USER_PW : VARCHAR2(1000):NOT NULL
 *  USER_NAME : VARCHAR2(1000):NOT NULL
 *  USER_ADRESS : VARCHAR2(1000):NOT NULL
 * 	USER_EMIAL : VARCHAR2(1000)
 *  USER_BIRTH : DATE
 * 
 * 
 * ORDER_A
 * -----------------------------------------------------------
 * ORDER_NUMBER : NUMBER CONSTRAINT PK_ORDER_A PRIMARY KEY
 * -----------------------------------------------------------
 * ORDER_DATE : DATE : NOT NULL
 * ORDER_A_USER_NUMBER : FK_ORDER_USER FOREIGN KEY(USER_NUMBER) : NOT NULL
 * ORDER_A_PRODUCT_NUMBER : FK_PRODUCT_NUMBER FOREIGN KEY(PRODUCT_NUMBER) : NOT NULL
 * 
 * 
 * PRODUCT
 * -------------------------------------------------------------
 * PRODUCT_NUMBER : NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY
 * -------------------------------------------------------------
 * PRODCUT_NAME : VARCHAR2(255) : NOT NULL
 * PRODUCT_PRICE : VARCHAR2(1000) : DEFAULT 0
 * PRODUCT_STOCK : VARCHAR2(1000) : DEFAULT 0
 * */


/*
CREATE TABLE TBL_USER (
    USER_NUMBER NUMBER CONSTRAINT PK_USER PRIMARY KEY,
    USER_ID VARCHAR2(1000) CONSTRAINT UK_USER UNIQUE NOT NULL,
    USER_PW VARCHAR2(1000) NOT NULL,
    USER_NAME VARCHAR2(1000) NOT NULL,
    USER_ADDRESS VARCHAR2(1000) NOT NULL,
    USER_EMAIL VARCHAR2(1000),
    USER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT (
    PRODUCT_NUMBER NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(1000) NOT NULL,
    PRODUCT_PRICE NUMBER DEFAULT 0,
    PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER_A (
    ORDER_NUMBER NUMBER CONSTRAINT PK_ORDER_A PRIMARY KEY,
    ORDER_DATE DATE NOT NULL,
    ORDER_USER_NUMBER NUMBER,
    ORDER_PRODUCT_NUMBER NUMBER,
    CONSTRAINT FK_ORDER_A_USER FOREIGN KEY (ORDER_USER_NUMBER)
    REFERENCES TBL_USER (USER_NUMBER),
    CONSTRAINT FK_ORDER_A_PRODUCT FOREIGN KEY (ORDER_PRODUCT_NUMBER)
    REFERENCES TBL_PRODUCT (PRODUCT_NUMBER)
);
*/
/*=================================================================================*/

/*숙제 테이블 간의 관계를 잘 이해하고 볼 수 있는지가 중요*/ 
/*1. 요구사항 분석
 * 1 : n
    꽃 테이블과 화분 테이블 2개가 필요하고,
    꽃을 구매할 때 화분도 같이 구매합니다.
    꽃은 이름과 색상, 가격이 있고,
    화분은 제품번호, 색상, 모양이 있습니다.
    화분은 모든 꽃을 담을 수 없고 정해진 꽃을 담아야 합니다.

2. 개념 모델링
	꽃		화분
	이름		제품번호
	색상		색상
	가격		모양


3. 논리 모델링
	꽃		화분
--------------------
	이름P		제품번호P
---------------------
	색상NN		색상FK,NN
	가격D0		모양 FK


4. 물리 모델링
FLOWER
---------------------
ID : VARCHAR2(1000)
---------------------
FLOWER_COLOR : VARCHAR2(1000): NOT NULL
FLOWER_PRICE : VARCHAR2(1000):DEFAULT 0

POT
----------------------
ID : NUMBER
------------------------
POT_COLOR: VARCHAR2(100):NOT NULL
POT_SHAPE : FOREIGN KEY(ID) : NOT NULL
/*구현된 테이블 구조 해석
 * 
 * 하나의 꽃은 여러 화분에 담길 수 있으나,
 * 하나의 화분에는 하나의 꽃만 담을 수 있는
 * 전형적인 1:N 구조이다.
 * 
 * */
/*CREATE TABLE TBL_FLOWER(
   ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
   NAME VARCHAR2(255) NOT NULL CONSTRAINT UK_FLOWER UNIQUE,
   COLOR VARCHAR2(255) NOT NULL,
   PRICE NUMBER DEFAULT 0
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   COLOR VARCHAR2(255) NOT NULL,
   SHAPE VARCHAR2(255) NOT NULL,
   FLOWER_ID NUMBER,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   REFERENCES TBL_FLOWER(ID)
);*/

/*복합키(조합키)
 * 
 * PK를 설정할 때 컬럼을 2개 이상 설정하는 문법.
 * 여러 개의 컬럼 조합으로 중복이 없는 경우 하나의 PK처럼 사용할 수 있게 된다.
 * 
 * */

/*구현된 테이블 구조 해석
 * 
 * 하나의 꽃은 여러 화분에 담길 수 있으나,
 * 하나의 화분에는 하나의 꽃만 담을 수 있는
 * 전형적인 1:N 구조이다.
 * 
 * */
/*DROP TABLE TBL_FLOWER_POT;
DROP TABLE TBL_FLOWER;

CREATE TABLE TBL_FLOWER(
   NAME VARCHAR2(255) NOT NULL,
   COLOR VARCHAR2(255) NOT NULL,
   PRICE NUMBER DEFAULT 0,
   CONSTRAINT PK_FLOWER PRIMARY KEY(NAME, COLOR)
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   COLOR VARCHAR2(255) NOT NULL,
   SHAPE VARCHAR2(255) NOT NULL,
   FLOWER_NAME VARCHAR2(255) NOT NULL,
   FLOWER_COLOR VARCHAR2(255) NOT NULL,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_NAME, FLOWER_COLOR)
   REFERENCES TBL_FLOWER(NAME, COLOR)
);*/

/*슈퍼키, 서브키
 * 
 * FK를 PK로 설정한다.
 * 
 * */

/*구현된 테이블 구조 해석
 * 
 * 하나의 꽃은 하나의 화분에 담길 수 있고,
 * 하나의 화분에는 하나의 꽃만 담을 수 있는
 * 전형적인 1:1 구조이다.
 * 
 * */
/*CREATE TABLE TBL_FLOWER(
   ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
   NAME VARCHAR2(255) NOT NULL CONSTRAINT UK_FLOWER UNIQUE,
   COLOR VARCHAR2(255) NOT NULL,
   PRICE NUMBER DEFAULT 0
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   COLOR VARCHAR2(255) NOT NULL,
   SHAPE VARCHAR2(255) NOT NULL,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(ID)
   REFERENCES TBL_FLOWER(ID)
);*/



/*=================================================================================*/
/*
1. 요구사항 분석
    안녕하세요, 동물병원을 곧 개원합니다.
    동물은 보호자랑 항상 같이 옵니다. 가끔 보호소에서 오는 동물도 있습니다.
    보호자가 여러 마리의 동물을 데리고 올 수 있습니다.
    보호자는 이름, 나이, 전화번호, 주소가 필요하고
    동물은 병명, 이름, 나이, 몸무게가 필요합니다.

2. 개념 모델링
	보호자	동물
	이름		보호자	
	나이		병명
	전화번호	이름
	주소		나이
			몸무게
			
3. 논리 모델링
	보호자		동물
	-------------------
	보호자 ID		동물 ID
	--------------------
					보호자ID FK, NN
	이름	NN			병명 NN
	나이	NN			이름 NN
	전화번호 U,NN		나이 NN
	주소 NN			몸무게 NN
		
	
4. 물리 모델링
	OWNER
	--------------------
	ID : NUMBER
	--------------------
	OWNER_NAME : VARCHAR2(1000) : NOT NULL
	OWNER_AGE : NUMBER : NOT NULL
	OWNER_PHONE : VARCHAR2(1000) :UNIQUE :NOT NULL 
	OWNER_ADRESS : VARCHAR2(1000) : NOT NULL
	
	PET
	-------------------
	ID : NUMBER
	-------------------
	OWNER_ID : NUMBER : FOREIGN KEY
	PER_DISEASE : VARCHAR2(1000) : NOT NULL
	PER_NAME : VARCHAR2(1000) : NOT NULL
	PER_AGE : NUMBER : NOT NULL
	PER_WEIGHT : NUMBER(3,5) : NOT NULL

5. 구현

*/
/*CREATE TABLE TBL_OWNER(
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(1000) NOT NULL,
	OWNER_AGE NUMBER NOT NULL,
    OWNER_PHONE VARCHAR2(1000) NOT NULL,
    OWNER_ADRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PET(
	ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
	OWNER_ID NUMBER,
	CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
	REFERENCES TBL_OWNER,
	PET_DISEASE VARCHAR2(1000) NOT NULL,
	PET_NAME VARCHAR2(1000) NOT NULL,
	PET_AGE NUMBER NOT NULL,
	PET_WEIGHT NUMBER(3,2) NOT NULL
);*/

/*
 * 요구 사항
 * 커뮤니티 게시판을 만들고 싶어요.
 * 게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
 * 게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요.
 * 작성자는 회원(TBL_USER) 정보를 그대로 사용해요.
 * 댓글에도 작성자가 필요해요.
 * 
 * 
 *  2. 개념 모델링
 * 게시판		회원
 * ID		ID
 * 제목		이름
 * 내용		나이
 * 시간		
 * 작성자
 * 
 * 
 * 
	3. 논리 모델링
* 게시글		회원
* ----------------
 * ID		ID
 * ----------------
 * 제목 NN		이름 NN
 * 내용 NN		나이 NN
 * 작성 시간 DATE		
 * 작성자 NN
 * 댓글
	4. 물리 모델링
	NOTICE
	------------------
	ID NUMBER
	-------------------
	NOTICE_TITLE : VARCHAR(1000): NOT NULL
	NOTICE_DETAIL : VARCHAR(1000): NOT NULL
	NOTICE_TIME : DATE : NOT NULL
	NOTICE_USER : VARCHAR(1000): FK :  USER_ID :NOT NULL
	NOTICE_REPLY : VARCHAR(255) : FK : USER_ID 
	
	
	USER
	------------------
	ID NUMBER
	-------------------
	USER_NAME : VARCHAR2(255) : NOT NULL
	USER_AGE : NUMBER : NOT NULL
	
	
	5. 구현
 * */
/*CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_POST(
   ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
   POST_TITLE VARCHAR2(255) NOT NULL,
   POST_CONTENT VARCHAR2(255) NOT NULL,
   CREATED_DATE DATE DEFAULT CURRENT_TIMESTAMP,
   MEMBER_ID NUMBER,
   CONSTRAINTS FK_POST_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

ALTER TABLE TBL_POST MODIFY(MEMBER_ID NULL);
ALTER TABLE TBL_POST MODIFY(MEMBER_ID NOT NULL);

CREATE TABLE TBL_REPLY(
   ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
   REPLY_CONTENT VARCHAR2(255) NOT NULL,
   POST_ID NUMBER NOT NULL,
   MEMBER_ID NUMBER NOT NULL,
   CONSTRAINTS FK_REPLY_POST FOREIGN KEY(POST_ID)
   REFERENCES TBL_POST(ID),
   CONSTRAINTS FK_REPLY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);*/

/* 요구 사항
    마이페이지에서 회원 프로필을 구현하고 싶습니다.
    회원당 프로필을 여러 개 설정할 수 있고,
    대표 이미지로 선택된 프로필만 화면에 보여주고 싶습니다.
    

2. 개념 모델링
	마이페이지		회원		프로필
	ID			ID		ID
	회원 ID				프로필 1
	대표 프로필				대표 프로필
	
3. 논리 모델링			
	회원			프로필
	-----------------------------
	ID			ID
	-----------------------------
	이름	NN		 	프로필 1 NN
	이메일NN			회원 ID FK
	비밀번호NN			대표 프로필	 NN
	
4. 물리 모델링
		USER
	--------------------------------
	ID VARCHAR(255)
	--------------------------------
	USER_NAME : VARCHAR2(1000) : NOT NULL
	USER_EMAIL : VARCHAR2(1000) : NOT NULL
	USER_PASSWORD : VARCHAR2(1000) : NOT NULL
	
	PROFILE
	--------------------------------
	ID NUMBER 
	--------------------------------
	USER_ID : NUMBER: FK : NOT NULL
	PROFILE_IMAGE : VARCHAR2(1000) : NOT NULL
	IS_PRIMARY : NUMBER : DEFAULT 0 
	
5. 구현
*/
/*구현된 테이블 구조 해석
 * 
 * 회원은 프로필을 여러 개 만들 수 있고
 * 마이페이지에는 대표 이미지 하나만 들어가기 때문에
 * 1 : N 구조이다.
 * 
 * */

/*CREATE TABLE TBL_USER (
    USER_ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
    USER_NAME VARCHAR2(1000) NOT NULL,
    USER_EMAIL VARCHAR2(1000) NOT NULL,
    USER_PASSWORD VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PROFILE (
    PROFILE_ID NUMBER CONSTRAINT PK_PROFILE PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    PROFILE_IMAGE VARCHAR2(1000) NOT NULL,
    IS_PRIMARY NUMBER DEFAULT 0,
    CONSTRAINT FK_PROFILE_USER FOREIGN KEY (USER_ID)
    REFERENCES TBL_USER(USER_ID)
);*/

/*
1. 요구 사항
    회원들끼리 좋아요를 누를 수 있습니다.

2. 개념 모델링
	회원		좋아요
	ID		번호
	이름		누른 회원 ID 
	이메일	받은 회원 ID 
	비밀번호
	
3. 논리 모델링
	회원		좋아요
	-------------
	ID		번호
	--------------
	이름 NN		누른 회원 ID FK
	이메일 NN		받은 회원 ID FK
	비밀번호 NN

4. 물리 모델링
	USER
	--------------------------------
	ID VARCHAR(255)
	--------------------------------
	USER_NAME : VARCHAR2(1000) : NOT NULL
	USER_EMAIL : VARCHAR2(1000) : NOT NULL
	USER_PASSWORD : VARCHAR2(1000) : NOT NULL
	
	
	GOOD
	---------------------------------
	ID NUMBER
	--------------------------------
	GOOD_USER_ID : VARCHAR2(1000) : FK : NOT NULL
	


5. 구현
*/
/*CREATE TABLE TBL_USER (
    ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
    USER_NAME VARCHAR2(1000) NOT NULL,
    USER_EMAIL VARCHAR2(1000) NOT NULL,
    USER_PASSWORD VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_LIKE (
    ID NUMBER CONSTRAINT PK_LIKE PRIMARY KEY,
    USER_ID_LIKE NUMBER NOT NULL,
    USER_ID_LIKED NUMBER NOT NULL,
    CONSTRAINT FK_LIKE_USER FOREIGN KEY (USER_ID_LIKE)
    REFERENCES TBL_USER(ID),
    CONSTRAINT FK_LIKE_USER2 FOREIGN KEY (USER_ID_LIKED)
    REFERENCES TBL_USER(ID)
);*/
/*
    1. 요구사항 분석
        안녕하세요 중고차 딜러입니다.
        이번에 자동차와 차주를 관리하고자 방문했습니다.
        자동차는 여러 명의 차주로 히스토리에 남아야 하고,
        차주는 여러 대의 자동차를 소유할 수 있습니다.
        그래서 우리는 항상 등록증(Registration)을 작성합니다.
        자동차는 브랜드, 모델명, 가격, 출시날짜가 필요하고
        차주는 이름, 전화번호, 주소가 필요합니다.

    2. 개념 모델링
    	자동차		차주		등록증
    	번호			id		ID
    	브랜드		이름		자동차 번호
    	모델명		전화번호	차주 ID
    	가격			주소
    	출시날짜		
		
    3. 논리 모델링
        자동차				차주
    	번호					id
    	----------------------
    	브랜드 NN				이름 NN
    	모델명 NN			전화번호 NN
    	가격	D0, NN			주소 NN
    	출시날짜 DATE			

    	
    
    4. 물리 모델링
    CAR
    ----------------------------
    ID : NUMBER
    ----------------------------
    CAR_BRAND : VARCHAR2(255) : NOT NULL
    CAR_MODEL : VARCHAR2(255) : NOT NULL 
    CAR_PRICE : NUMBER : DEFAULT 0
    CAR_DATE : DATE 
    
    OWNER
    ------------------------------
    ID : NUMBER
    -------------------------------
    OWNER_NAME : VARCHAR(255) : NOT NULL
    OWNER_PHONE : VARCHAR(255) : NOT NULL
    OWNER_ADDRESS : VARCHAR(255) : NOT NULL
    
    REGISTRATION
    ----------------------------------
    ID: NUMBER
    ----------------------------------
    CAR_ID : FK
    OWNER_ID : FK
    
    5. 구현
*/
/*CREATE TABLE TBL_CAR(
	ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(255) NOT NULL,
	CAR_MODEL VARCHAR2(255) NOT NULL,
	CAR_PRICE NUMBER DEFAULT 0,
	CAR_DATE DATE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE TBL_OWNER(
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(255) NOT NULL,
	OWNER_PHONE VARCHAR2(255) NOT NULL,
	OWNER_ADDRESS VARCHAR2(255) NOT NULL
);

CREATE TABLE TBL_REGISTRATION(
	ID NUMBER CONSTRAINT PK_REGISTRATION PRIMARY KEY,
	REGISTRATION_CAR_ID NUMBER,
	REGISTRATION_OWNER_ID NUMBER,
	CONSTRAINT FK__REGISTRATION_CAR FOREIGN KEY (REGISTRATION_CAR_ID)
    REFERENCES TBL_CAR(ID),
    CONSTRAINT FK__REGISTRATION_OWNER FOREIGN KEY (REGISTRATION_OWNER_ID)
    REFERENCES TBL_OWNER(ID)
);*/
/*
    요구사항

    학사 관리 시스템에 학생과 교수, 과목을 관리합니다.
    학생은 학번, 이름, 전공, 학년이 필요하고
    교수는 교수 번호, 이름, 전공, 직위가 필요합니다.
    과목은 고유한 과목 번호와 과목명, 학점이 필요합니다.
    학생은 여러 과목을 수강할 수 있으며,
    교수는 여러 과목을 강의할 수 있습니다.
    학생이 수강한 과목은 성적(점수)이 모두 기록됩니다.
*/
/*
 * 2. 개념 모델링
 * 		학생		교수			과목
 * 		학번		교수번호		과목 번호
 * 		이름		이름			과목명
 * 		전공		전공			학점
 * 		학년		직위
 * 
 * 
 * 3. 논리 모델링
 * 		학생			교수			과목			학사관리시스템
 * -----------------------------------------------------
 * 		학번			교수번호		과목 번호		ID
 ------------------------------------------------------
 * 		이름NN		이름	NN		과목명 NN		학번 FK
 * 		전공NN		전공	NN		학점 NN		교수번호 FK
 * 		학년NN		직위 NN 					과목번호 FK
 * 4. 물리 모델링
 * 
 * STUDENT
 * -------------------------------
 * ID : NUMBER
 * -------------------------------
 * STUDENT_NAME : VARCHAR(255) : NOT NULL
 * STUDENT_MAJOR : VARCHAR(255) : NOT NULL
 * STUDENT_GRADE : VARCHAR(255) : NOT NULL
 * 
 *  PROFESSOR
 * -------------------------------
 * ID : NUMBER
 * -------------------------------
 * PROFESSOR_NAME : VARCHAR(255) : NOT NULL
 * PROFESSOR_MAJOR : VARCHAR(255) : NOT NULL
 * PROFESSOR_DEPARTMENT : VARCHAR(255) : NOT NULL
 * 
 *  SUBJECT
 * -------------------------------
 * ID : NUMBER
 * -------------------------------
 * SUBJECT_NAME : VARCHAR(255) : NOT NULL
 * SUBJECT_SCORE : VARCHAR(255) : NOT NULL

 * SYSTEM
 *-------------------------------
 * ID : NUMBER
 * -------------------------------
 * PROFESSOR_ID : NUMBER :FK: NOT NULL
 * STUDENT_ID : NUMBER :FK :NOT NULL
 * SUBJECT_NAME : NUMBER :FK :NOT NULL

 * 5. 구현*/
/*
 */
/*
CREATE TABLE TBL_STUDENT(
   ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
   STUDENT_NAME VARCHAR2(255) NOT NULL,
   STUDENT_MAJOR VARCHAR2(255) NOT NULL,
   STUDENT_GRADE NUMBER DEFAULT 1
);

CREATE TABLE TBL_PROFESSOR(
   ID NUMBER CONSTRAINT PK_PROFESSOR PRIMARY KEY,
   PROFESSOR_NAME VARCHAR2(255) NOT NULL,
   PROFESSOR_MAJOR VARCHAR2(255) NOT NULL,
   PROFESSOR_POSITION VARCHAR2(255)
);

CREATE TABLE TBL_SUBJECT(
   ID NUMBER CONSTRAINT PK_SUBJECT PRIMARY KEY,
   SUBJECT_NAME VARCHAR2(255) NOT NULL CONSTRAINT UK_SUBJECT UNIQUE,
   SUBJECT_SCORE NUMBER(3, 2) DEFAULT 0.0
);

ALTER TABLE TBL_SUBJECT ADD (STATUS NUMBER DEFAULT 0);


CREATE TABLE TBL_STUDENT_SUBJECT(
   ID NUMBER CONSTRAINT PK_STUDENT_SUBJECT PRIMARY KEY,
   STUDENT_ID NUMBER NOT NULL,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_STUDENT_SUBJECT_STUDENT FOREIGN KEY(STUDENT_ID)
   REFERENCES TBL_STUDENT(ID),
   CONSTRAINT FK_STUDENT_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);

CREATE TABLE TBL_LECTURE(
   ID NUMBER CONSTRAINT PK_LECTURE PRIMARY KEY,
   PROFESSOR_ID NUMBER,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LECTURE_PROFESSOR FOREIGN KEY(PROFESSOR_ID)
   REFERENCES TBL_PROFESSOR(ID),
   CONSTRAINT FK_LECTURE_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);
*/
/*
    1. 요구사항 분석
    	대카테고리, 소카테고리가 필요해요.
    	
    2. 개념 모델링
    	대카테고리		소카테고리
    	ID			ID
    	과일			사과
    				배
    				키위
    3. 논리 모델링
     	대카테고리			소카테고리
    	ID					ID
    	-------------------------
    	과일	NN ,FK			사과
    						배
    						키위
    	
    
    4. 물리 모델링
    	FIRST_CATEGOTY
    	----------------------------
    	ID NUMBER 
    	----------------------------
    	FRUIT VARCHAR2(255) : NOT NULL : FK
    	
    	
    	SECOND_CATEGORY
    	-----------------------------
    	ID NUMBER
    	-----------------------------
    	APPLE : VARCHAR2(255) : NOT NULL
    	PEAR : VARCHAR2(255) : NOT NULL
    	KIWI : VARCHAR2(255) : NOT NULL
    
    5. 구현
*/
/*
/*대카*/
CREATE TABLE TBL_CATEGORY_A(
   ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
   CATEGORY_A_NAME VARCHAR2(255)
);

/*소카*/
CREATE TABLE TBL_CATEGORY_B(
   ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
   CATEGORY_B_NAME VARCHAR2(255),
   CATEGORY_A_ID NUMBER,
   CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
   REFERENCES TBL_CATEGORY_A(ID)
);
*/

/*
 * 요구 사항
 * 
 * 회의실 예약 서비스를 제작하고 싶습니다.
 * 회원별로 등급이 존재하고 사무실마다 회의실이 여러 개 있습니다.
 * 회의실 이용 가능 시간은 파트 타임으로서 여러 시간대가 존재합니다.
 * 
 * 
 * 
2. 개념 모델링
	회원		사무실	 회의실	 회의실 예약 서비스
	이름		사무실명	 사무실명		회원ID
	등급				 회의실명 		회의실ID
	
	
3. 논리 모델링
	회원		사무실	 회의실	 회의실 예약 서비스
	--------------------------------------
	이름 NN	사무실명NN	 사무실명FK		회원ID FK
	등급	NN			 회의실명NN 		회의실ID FK
									시작 시간 TIME
									종료 시간	TIME
4. 물리 모델링
5. 구현
*/

/*CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_OFFICE(
   ID NUMBER CONSTRAINT PK_OFFICE PRIMARY KEY,
   OFFICE_NAME VARCHAR2(255) NOT NULL,
   OFFICE_LOCATION VARCHAR2(255) NOT NULL
);

CREATE TABLE TBL_CONFERENCE_ROOM(
   ID NUMBER CONSTRAINT PK_CONFERENCE_ROOM PRIMARY KEY,
   OFFICE_ID NUMBER NOT NULL,
   CONSTRAINT FK_CONFERENCE_ROOM_OFFICE FOREIGN KEY(OFFICE_ID)
   REFERENCES TBL_OFFICE(ID)
);

CREATE TABLE TBL_PART_TIME(
   ID NUMBER CONSTRAINT PK_PART_TIME PRIMARY KEY,
   START_TIME DATE NOT NULL,
   END_TIME DATE NOT NULL
   CONFERENCE_ROOM_ID NUMBER,
   CONSTRAINT FK_PART_TIME_CONFERENCE_ROOM FOREIGN KEY(CONFERENCE_ROOM_ID)
   REFERENCES TBL_CONFERENCE_ROOM(ID)
);

CREATE TABLE TBL_RESERVATION(
   ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PART_TIME_ID NUMBER NOT NULL,
   CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER_ID(ID),
   CONSTRAINT FK_RESERVATION_PART_TIME FOREIGN KEY(PART_TIME_ID)
   REFERENCES TBL_PART_TIME(ID)
);*/


/*숙제
 * 테이블 구조 문제 3개 만들고 풀어보기
 * 
 * 1.요구사항
 * 도서를 관리하는 시스템을 만드려고 합니다.
 *도서는 여러 저자에 의해 쓰일 수 있으며, 저자는 여러 도서를 쓸 수 있습니다.
 *도서는 도서 번호, 제목, 출판사, 출판연도를 필요로 합니다.
 *저자는 이름, 생년월일, 국적이 필요합니다.
 *
 * 2. 개념적 설계
 * 	도서			저자		도서 관리
 * 	도서 번호		이름		도서 번호
 * 	제목			생년월일	저자
 * 	출판사		국적
 * 	출판연도
 * 
 * 3. 논리적 설계
 * 	도서				저자				도서 관리
 * -------------------------------------------
 * 	도서 번호			ID				ID	
 * --------------------------------------------
 * 	제목	NN			생년월일 DATE		저자 FK
 * 	출판사 NN			국적	NN			도서 번호 FK
 * 	출판연도 DATE		이름	NN			
 * 
 * 4. 물리적 설계
 * BOOK
 * ----------------------------------
 * ID NUMBER
 * ----------------------------------
 * BOOK_TITLE : VARCAHR2(255) :NOT NULL
 * BOOK_COMPANY : VARCAHR2(255) :NOT NULL
 * BOOK_PUBLISH_DATE : DATE
 * 
 * AUTHOR
 * -----------------------------------
 * ID NUMBER
 * -----------------------------------
 * AUTHOR_NAME : VARCHAR2(255) : NOT NULL
 * AUTHOR_HOMETOWN : VARCHAR2(255) : NOT NULL
 * AUTHOR_BIRTH : DATE
 * 
 * BOOK_MANAGEMENT
 * -----------------------------------
 * ID NUMBER
 * -----------------------------------
 * BOOK_ID : NUMBER : NOT NULL : FK
 * AUTHOR_ID : NUMBER : NOT NULL : FK
 * 
 * 5. 구현
 * */
/*CREATE TABLE TBL_BOOK(
	ID NUMBER CONSTRAINT PK_BOOK PRIMARY KEY,
	BOOK_TITLE VARCHAR2(255) NOT NULL,
	BOOK_COMPANY VARCHAR2(255) NOT NULL,
	BOOK_PUBLISH_DATE DATE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE TBL_AUTHOR(
	ID NUMBER CONSTRAINT PK_AUTHOR PRIMARY KEY,
	AUTHOR_NAME VARCHAR2(255) NOT NULL,
	AUTHOR_HOMETOWN VARCHAR2(255) NOT NULL,
	AUTHOR_BIRTH DATE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE TBL_BOOK_MANAGEMENT(
	ID NUMBER CONSTRAINT PK_BOOK_MANAGEMENT PRIMARY KEY,
	BOOK_ID NUMBER NOT NULL,
	AUTHOR_ID NUMBER NOT NULL,
	CONSTRAINT FK_MANAGEMENT_BOOK FOREIGN KEY (BOOK_ID)
    REFERENCES TBL_BOOK(ID),
    CONSTRAINT FK_MANAGEMENT_AUTHOR FOREIGN KEY (AUTHOR_ID)
    REFERENCES TBL_AUTHOR(ID)
);*/


/*
 * 1. 요구사항
 * 	영화와 리뷰를 관리하는 시스템을 만드려고 합니다.
	영화는 여러 리뷰를 가질 수 있으며, 리뷰는 여러 영화에 속할 수 있습니다. <- 리뷰에 FK
	영화는 제목, 감독, 개봉일, 장르가 필요합니다.
	리뷰는 작성자, 내용이 필요합니다.
 * 
 * 2. 개념적 설계
 * 	영화		리뷰		리뷰 관리
 * 	제목		작성자	영화 ID
 * 	감독		내용		리뷰 ID
 * 	개봉일
 * 	장르
 * 
 * 3. 논리적 설계
 * 
 * 	영화				리뷰		 	리뷰 관리
 * ---------------------------------------
 * ID			 	ID		 		ID
 * ----------------------------------------
 * 	제목 NN		 	작성자 NN	 		영화 ID FK
 * 	감독 NN		 	내용 NN			리뷰 ID FK
 * 	개봉일 DATE		
 * 	장르 NN			
 
 * 4. 물리적 설계
 * 
 * MOVIE
 * --------------------------
 * ID NUMBER
 * --------------------------
 * MOVIE_TITLE : VARCHAR2(255) : NOT NULL
 * MOVIE_DIRECTOR : VARCHAR2(255) : NOT NULL
 * MOVIE_DATE : DATE 
 * MOVIE_GENRE : VARCHAR2(255) : NOT NULL
 * 
 * REVIEW
 * ---------------------------
 * ID NUMBER
 * ---------------------------
 * USER_ID : VARCHAR2(255) : NOT NULL
 * REVIEW_CONTENT : VARCHAR2(255) : NOT NULL
 * 
 * 
 * 5. 구현
 * 
 * 
 * */
/*CREATE TABLE TBL_MOVIE (
    MOVIE_ID NUMBER CONSTRAINT PK_MOVIE PRIMARY KEY,
    MOVIE_TITLE VARCHAR2(1000) NOT NULL,
    MOVIE_DIRECTOR VARCHAR2(1000) NOT NULL,
    MOVIE_RELEASE_DATE DATE NOT NULL,
    MOVIE_GENRE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_REVIEW (
    REVIEW_ID NUMBER CONSTRAINT PK_REVIEW PRIMARY KEY,
    USER_ID VARCHAR2(1000) NOT NULL,
    REVIEW_CONTENT VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_MOVIE_REVIEW (
    MOVIE_ID NUMBER NOT NULL,
    REVIEW_ID NUMBER NOT NULL,
    CONSTRAINT FK_MOVIE_REVIEW_MOVIE FOREIGN KEY (MOVIE_ID)
        REFERENCES TBL_MOVIE(MOVIE_ID),
    CONSTRAINT FK_MOVIE_REVIEW_REVIEW FOREIGN KEY (REVIEW_ID)
        REFERENCES TBL_REVIEW(REVIEW_ID)
);*/

/*
 * 1. 요구사항
	스포츠 리그를 관리하는 시스템을 구축하려고 합니다.
	각 리그는 여러 팀이 참가할 수 있으며, 각 팀은 여러 선수로 구성됩니다.
	선수는 여러 리그에서 활동할 수 있습니다.
	각 리그는 여러 경기로 구성되며, 각 경기는 특정 날짜와 장소에서 열립니다.
	경기 결과는 각 팀의 점수와 경기의 승패 여부를 기록합니다.
	리그는 리그 번호, 리그명, 시즌이 필요합니다.
	팀은 팀 번호, 팀명, 소속 리그가 필요합니다.
	선수는 선수 번호, 이름, 포지션, 생년월일이 필요합니다.
	경기는 경기 번호, 날짜, 장소, 홈 팀, 원정 팀이 필요합니다.
	경기 결과는 경기 번호, 팀 번호, 점수, 승패 여부가 필요합니다.
 * 
 * 2. 개념적 설계
 * 	리그		팀		선수		경기		경기 결과
 * 리그명		팀명		선수명	매치데이	경기ID
 * 시즌		리그명	포지션	장소		팀ID
 * 					생일		홈팀		점수
							어웨이팀	승자
 *  * 3. 논리적 설계
 * 	리그			팀			선수			경기			경기 결과
 * ----------------------------------------------------
 *	ID			ID			ID			ID			ID
 * ------------------------------------------------------
 * 리그명NN		팀명NN		선수명NN		매치데이DATE	경기ID FK
 * 시즌NN			리그명FK		포지션NN		장소NN		팀ID FK
 * 							생일DATE		홈팀FK		점수 NN
										어웨이팀FK		승자 NN
 * 
 * 4. 물리적 설계
 * 
 * TBL_LEAGUE
 * ------------------------------
 * ID NUMBER
 * ------------------------------
 * LEAGUE_NAME : VARCHAR2(1000) : NOT NULL
 * SEASON : VARCHAR2(1000) : NOT NULL
 * 
 * TBL_TEAM
 * ------------------------------
 * ID NUMBER
 * ------------------------------
 * TEAM_NAME : VARCHAR2(1000) : NOT NULL
 * LEAGUE_ID : NUMBER: FK : NOT NULL
 * 
 * 
 *  TBL_PLAYER
 * ------------------------------
 * ID NUMBER
 * ------------------------------
 * PLAYER_NAME  : VARCHAR2(1000) : NOT NULL
 * PLAYER_POSITION : 
 * BIRTH : DATE :  NOT NULL

 *   TBL_MATCH
 * ------------------------------
 * ID NUMBER
 * ------------------------------
 *  MACTH_DATE  : DATE  : NOT NULL,
    LOCATION  : VARCHAR2(1000) :  NOT NULL
    HOME_TEAM_ID : NUMBER  : NOT NULL : FK
    AWAY_TEAM_ID  : NUMBER  : NOT NULL : FK
 * 
 * TBL_MATCH_RESULT
 * ------------------------------
 * ID NUMBER
 * ------------------------------
 *  MATCH_ID : NUMBER : NOT NULL :FK
    TEAM_ID  : NUMBER : NOT NULL: FK
    MATCH_SCORE : NUMBER : NOT NULL
    MATCH_WINNER : NUMBER : NOT NULL
 * 5. 구현
 * */
/*
CREATE TABLE TBL_LEAGUE (
    ID NUMBER CONSTRAINT PK_LEAGUE PRIMARY KEY,
    LEAGUE_NAME VARCHAR2(1000) NOT NULL,
    SEASON VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_TEAM (
    ID NUMBER CONSTRAINT PK_TEAM PRIMARY KEY,
    TEAM_NAME VARCHAR2(1000) NOT NULL,
    LEAGUE_ID NUMBER NOT NULL,
    CONSTRAINT FK_TEAM_LEAGUE FOREIGN KEY (LEAGUE_ID)
        REFERENCES TBL_LEAGUE(ID)
);

CREATE TABLE TBL_PLAYER (
    ID NUMBER CONSTRAINT PK_PLAYER PRIMARY KEY,
    PLAYER_NAME VARCHAR2(1000) NOT NULL,
    PLAYER_POSITION VARCHAR2(1000) NOT NULL,
    BIRTH DATE NOT NULL
);

CREATE TABLE TBL_MATCH (
    ID NUMBER CONSTRAINT PK_MATCH PRIMARY KEY,
    MACTH_DATE DATE NOT NULL,
    LOCATION VARCHAR2(1000) NOT NULL,
    HOME_TEAM_ID NUMBER NOT NULL,
    AWAY_TEAM_ID NUMBER NOT NULL,
    CONSTRAINT FK_MATCH_HOME_TEAM FOREIGN KEY (HOME_TEAM_ID)
        REFERENCES TBL_TEAM(ID),
    CONSTRAINT FK_MATCH_AWAY_TEAM FOREIGN KEY (AWAY_TEAM_ID)
        REFERENCES TBL_TEAM(ID)
);

CREATE TABLE TBL_MATCH_RESULT (
    ID NUMBER CONSTRAINT PK_RESULT PRIMARY KEY,
    MATCH_ID NUMBER NOT NULL,
    TEAM_ID NUMBER NOT NULL,
    MATCH_SCORE NUMBER NOT NULL,
    MATCH_WINNER NUMBER NOT NULL,
    CONSTRAINT FK_RESULT_MATCH FOREIGN KEY (MATCH_ID)
        REFERENCES TBL_MATCH(ID),
    CONSTRAINT FK_RESULT_TEAM FOREIGN KEY (TEAM_ID)
        REFERENCES TBL_TEAM(ID)
);
*/
/*
1. 요구사항
   유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
   아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
   체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
   아이들은 여러 번 체험학습에 등록할 수 있어요.
    
2. 개념 모델링
	아이들		학부모		체험학습			
	이름			이름			제목
	나이			나이			내용
	성별			주소			이벤트 이미지
				전화번호
				성별	
				
				
3. 논리 모델링
	아이들				학부모				체험학습		
	-------------------------------------------------
	ID					ID 					ID
	------------------------------------------------
	이름NN				이름	NN			제목 NN
	나이NN				나이	NN			내용 NN
	성별NN				주소	NN			이벤트 이미지 NN
						전화번호NN
						성별	NN
				
4. 물리 모델링

CHILD
-----------------------------
ID NUMBER
-----------------------------
    CHILD_NAME : VARCHAR2(1000) : NOT NULL
    CHILD_AGE : NUMBER : NOT NULL
    CHILD_GENDER : VARCHAR2(10) : NOT NULL

PARENT
-----------------------------
ID NUBER
-----------------------------
    PARENT_NAME VARCHAR2(1000) NOT NULL
    PARENT_AGE NUMBER NOT NULL
    PARENT_ADDRESS VARCHAR2(1000) NOT NULL
    PARENT_PHONE VARCHAR2(1000) NOT NULL
    PARENT_GENDER VARCHAR2(10) NOT NULL


ACTIVITY
-----------------------------
ID NUMBER
-----------------------------
    ACTIVITY_TITLE : VARCHAR2(1000) : NOT NULL
    ACTIVITY_DESCRIPTION : VARCHAR2(2000) : NOT NULL
    
ACTIVITY_IMAGE
-----------------------------
ID NUMBER
-----------------------------
    ACTIVITY_ID : NUMBER: NOT NULL: FK
    IMAGE_URL : VARCHAR2(1000) NOT NULL

REGISTRATION
-----------------------------
ID NUMBER
------------------------------
    CHILD_ID : NUMBER : NOT NULL : FK
    ACTIVITY_ID : NUMBER : NOT NULL :FK


5. 구현
*/
/*
CREATE TABLE TBL_KINDERGARTEN(
   ID NUMBER CONSTRAINT PK_KINDERGARTEN PRIMARY KEY,
   KINDERGARTEN_NAME VARCHAR2(255),
   KINDERGARTEN_ADDRESS VARCHAR2(255)
);

CREATE TABLE TBL_PARENT(
   ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
   PARENT_NAME VARCHAR2(255) NOT NULL,
   PARENT_ADDRESS VARCHAR2(255) NOT NULL,
   PARENT_PHONE VARCHAR2(255) NOT NULL,
   PARENT_GENDER NUMBER DEFAULT 3
);

CREATE TABLE TBL_CHILD(
   ID NUMBER CONSTRAINT PK_CHILD PRIMARY KEY,
   CHILD_AGE NUMBER NOT NULL,
   CHILD_GENDER NUMBER DEFAULT 3,
   PARENT_ID NUMBER,
   CONSTRAINT FK_CHILD_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID)
);

CREATE TABLE TBL_FIELD_TRIP(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
   FIELD_TRIP_TITLE VARCHAR2(255),
   FIELD_TRIP_CONTENT VARCHAR2(255),
   KINDERGARTEN_ID NUMBER,
   CONSTRAINT FK_FIELD_TRIP_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_FILE(
   ID NUMBER CONSTRAINT PK_FILE PRIMARY KEY,
   FILE_NAME VARCHAR2(255),
   FILE_PATH VARCHAR2(255),
   FILE_SIZE NUMBER
);

CREATE TABLE TBL_FIELD_TRIP_FILE(
   ID NUMBER CONSTRAINT PK_FIELD_DRIP_FILE PRIMARY KEY,
   FIELD_TRIP_ID NUMBER NOT NULL,
   CONSTRAINT FK_FIELD_TRIP_FILE_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID),
   CONSTRAINT FK_FIELD_TRIP_FILE_FILE FOREIGN KEY(ID)
   REFERENCES TBL_FILE(ID)
);

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE,
   KINDERGARTEN_ID NUMBER,
   CONSTRAINT FK_MEMBER_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);
*/
/*
1. 요구사항
   안녕하세요, 광고 회사를 운영하려고 준비중인 사업가입니다.
   광고주는 기업이고 기업 정보는 이름, 주소, 대표번호, 기업종류(스타트업, 중소기업, 중견기업, 대기업)입니다.
   광고는 제목, 내용이 있고 기업은 여러 광고를 신청할 수 있습니다.
   기업이 광고를 선택할 때에는 카테고리로 선택하며, 대카테고리, 중카테고리, 소카테고리가 있습니다.

2. 개념 모델링
	기업		광고		광고 카테고리	기업종류	
	이름		제목		대카			스타트업
	주소		내용		중카			중소기업
	대표번호	기업id	소카			중견기업
	기업종류						대기업
	
3. 논리 모델링
	기업			광고			 	카테고리			기업종류
	---------------------------------------------------------	
	이름NN		제목NN			대카NN			스타트업NN
	주소NN		내용NN			중카NN			중소기업NN
	대표번호NN						소카NN			중견기업NN
	기업종류NN,FK									대기업NN
4. 물리 모델링										기업idNN,FK
COMPANY
------------------------------
ID NUMBER
------------------------------
COMPANY_NAME :VARCHAR2(255): NOT NULL
COMPANY_ADDRESS: VARCHAR2(255): NOT NULL
COMPANY_NUMBER: VARCHAR2(255): NOT NULL
COMPANY_TYPE: VARCHAR2(255): NOT NULL

CATEGOTY
------------------------------
ID NUMBER
------------------------------
CATEGOTY_MAJOR:VARCHAR2(255): NOT NULL
CATEGOTY_MEDIUM: VARCHAR2(255): NOT NULL
CATEGOTY_SUB: VARCHAR2(255): NOT NULL

COMPANY_TYPE
------------------------------
ID NUMBER
------------------------------
CATEGOTY_MAJOR:VARCHAR2(255): NOT NULL
CATEGOTY_MEDIUM: VARCHAR2(255): NOT NULL
CATEGOTY_SUB: VARCHAR2(255): NOT NULL
COMPANY_ID : NUMBER : NOT NULL : FK

ADVERTISEMENT
------------------------------
ID NUMBER
------------------------------
AD_TITLE : VARCHAR2(255) : NOT NULL
AD_CONTENT: VARCHAR2(255) : NOT NULL
COMPANY_ID : NUMBER : NOT NULL : FK
CATEGORY_ID : NUMBER : NOT NULL : FK

5. 구현
*/
/*CREATE TABLE TBL_COMPANY(
   ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
   COMAPNY_NAME VARCHAR2(255) NOT NULL,
   COMAPNY_ADDRESS VARCHAR2(255) NOT NULL,
   COMAPNY_TEL VARCHAR2(255) NOT NULL,
   COMAPNY_TYPE NUMBER
);

CREATE TABLE TBL_CATEGORY_A(
   ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
   CATEGORY_A_NAME VARCHAR2(255)
);

CREATE TABLE TBL_CATEGORY_B(
   ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
   CATEGORY_B_NAME VARCHAR2(255),
   CATEGORY_A_ID NUMBER,
   CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
   REFERENCES TBL_CATEGORY_A(ID)
);

CREATE TABLE TBL_CATEGORY_C(
   ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
   CATEGORY_C_NAME VARCHAR2(255),
   CATEGORY_B_ID NUMBER,
   CONSTRAINT FK_CATEGORY_C_CATEGORY_B FOREIGN KEY(CATEGORY_B_ID)
   REFERENCES TBL_CATEGORY_B(ID)
);

CREATE TABLE TBL_ADVERTISEMENT(
   ID NUMBER CONSTRAINT PK_ADVERTISEMENT PRIMARY KEY,
   ADVERTISEMENT_TITLE VARCHAR2(255) NOT NULL,
   ADVERTISEMENT_CONTENT VARCHAR2(255) NOT NULL,
   COMPANY_ID NUMBER,
   CONSTRAINT FK_ADVERTISEMENT_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID)
);

ALTER TABLE TBL_ADVERTISEMENT ADD (CATEGORY_C_ID NUMBER);
ALTER TABLE TBL_ADVERTISEMENT ADD 
CONSTRAINT FK_ADVERTISEMENT_CATEGORY_C FOREIGN KEY(CATEGORY_C_ID)
REFERENCES TBL_CATEGORY_C(ID);

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   COMPANY_ID NUMBER NOT NULL, 
   ADVERTISEMENT_ID NUMBER NOT NULL,
   CONSTRAINT FK_APPLY_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID),
   CONSTRAINT FK_APPLY_ADVERTISEMENT FOREIGN KEY(ADVERTISEMENT_ID)
   REFERENCES TBL_ADVERTISEMENT(ID)
);*/

/*
1. 요구사항
   음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
   음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
   당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.

2. 개념 모델링
	음료수		당첨 번호		당첨 상품		
	가격			당첨 음료		배송 중
	이름			당첨자		배송 완료
				당첨자 주소
				당첨자 번호
				
3. 논리 모델링
	
4. 물리 모델링
5. 구현
*/
/*CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_SOFT_DRINK(
   ID NUMBER CONSTRAINT PK_SOFT_DRINK PRIMARY KEY,
   SOFT_DRINK_NAME VARCHAR2(255)
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(255) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_LOTTERY(
   ID NUMBER CONSTRAINT PK_LOTTERY PRIMARY KEY,
   LOTTERY_NUMBER VARCHAR2(255) NOT NULL,
   PRODUCT_ID NUMBER,
   CONSTRAINT FK_LOTTERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_CIRCULATION(
   ID NUMBER CONSTRAINT PK_CIRCULATION PRIMARY KEY,
   SOFT_DRINK_ID NUMBER,
   LOTTERY_ID NUMBER,
   CONSTRAINT FK_CIRCULATION_SOFT_DRINK FOREIGN KEY(SOFT_DRINK_ID)
   REFERENCES TBL_SOFT_DRINK(ID),
   CONSTRAINT FK_CIRCULATION_LOTTERY FOREIGN KEY(LOTTERY_ID)
   REFERENCES TBL_LOTTERY(ID)
);

CREATE TABLE TBL_DILIVERY(
   ID NUMBER CONSTRAINT PK_DILIVERY PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   STATUS NUMBER DEFAULT 0,
   CONSTRAINT FK_DILIVERY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_DILIVERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);*/
/*
1. 요구사항
   이커머스 창업 준비중입니다. 기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
   기업의 정보는 기업 이름, 주소, 대표번호가 있고
   사용자 정보는 이름, 주소, 전화번호가 있습니다. 결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
   상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
   사용자는 등록한 카드의 정보를 저장할 수 있으며, 카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

2. 개념 모델링
	기업		사용자	결제			상품정보		카드			이커머스
	이름		이름		카드ID		이름			카드번호		결제ID
	주소		주소		기업ID		가격			카드사		
	대표번호	전화번호				재고			사용자ID
											
3. 논리 모델링
	기업				사용자		결제				상품정보			카드				이커머스
	---------------------------------------------------------------------------------------
	이름NN			이름	NN		카드ID NN,FK		이름	NN			카드번호NN,U		결제ID FK
	주소NN			주소	NN		기업ID NN,FK		가격	D0			카드사 NN			
	대표번호NN			전화번호NN						재고	D0			사용자ID FK
												
4. 물리 모델링
COMPANY
---------------------------------
ID NUMBER
---------------------------------
   COMAPNY_NAME : VARCHAR2(255): NOT NULL
   COMAPNY_ADDRESS:  VARCHAR2(255): NOT NULL
   COMAPNY_TEL : VARCHAR2(255): NOT NULL

USER
---------------------------------
ID NUMBER
---------------------------------
   USER_NAME : VARCHAR2(1000):NOT NULL
   USER_ADRESS : VARCHAR2(1000):NOT NULL
   USER_EMIAL : VARCHAR2(1000)
   USER_BIRTH : DATE

PAYMENT
---------------------------------
ID NUMBER
---------------------------------
CARD_ID :NUMBER: NOT NULL : FK
COMPANY_ID : NUMBER :NOT NULL : FK

PRODUCT
---------------------------------
ID NUMBER
---------------------------------
PRODUCT_NAME : VARCHAR2(255) : NOT NULL
PRODUCT_PRICE : NUMBER : DEAULT 0
PRODUCT_STOCK : NUMBER : DEAULT 0

CARD
---------------------------------
ID NUMBER
---------------------------------
CARD_NUMBER : VARCHAR2(255) : UNIQUE : NOT NULL 
CARD_COMPANY : VARCHAR2(255) : NOT NULL 
USER_ID : NUMBER :NOT NULL : FK

ECOMMERCE
---------------------------------
ID NUMBER
---------------------------------
PAYMENT ID : NUMBER : NOT NULL : FK

5. 구현
*/
/*
CREATE TABLE TBL_COMPANY (
    ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
    COMPANY_NAME VARCHAR2(255) NOT NULL,
    COMPANY_ADDRESS VARCHAR2(255) NOT NULL,
    COMPANY_TEL VARCHAR2(255) NOT NULL,
    COMPANY_PRODUCT NUMBER,
    CONSTRAINT FK_COMPANY_PRODUCT FOREIGN KEY (COMPANY_PRODUCT)
    REFERENCES TBL_PRODUCT(ID)  
);

CREATE TABLE TBL_USER (
    ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
    USER_NAME VARCHAR2(1000) NOT NULL,
    USER_ADDRESS VARCHAR2(1000) NOT NULL,
    USER_PHONE VARCHAR2(1000) NOT NULL,
   	USER_PRODUCT NUMBER,
    CONSTRAINT FK_USER_PRODUCT FOREIGN KEY (USER_PRODUCT)
    REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_PAYMENT (
    ID NUMBER CONSTRAINT PK_PAYMENT PRIMARY KEY,
    COMPANY_ID NUMBER NOT NULL,
    CARD_ID NUMBER NOT NULL,
    CONSTRAINT FK_PAYMENT_COMPANY FOREIGN KEY (COMPANY_ID)
        REFERENCES TBL_COMPANY(ID),
    CONSTRAINT FK_PAYMENT_CARD FOREIGN KEY (CARD_ID)
        REFERENCES TBL_CARD(ID)
);

CREATE TABLE TBL_PRODUCT (
    ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(255) NOT NULL,
    PRODUCT_PRICE NUMBER DEFAULT 0,
    PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_CARD (
    ID NUMBER CONSTRAINT PK_CARD PRIMARY KEY,
    CARD_NUMBER VARCHAR2(255) UNIQUE NOT NULL,
    CARD_COMPANY VARCHAR2(255) NOT NULL,
    USER_ID NUMBER NOT NULL,
    CONSTRAINT FK_CARD_USER FOREIGN KEY (USER_ID)
        REFERENCES TBL_USER(ID)
);
*/
/*DROP TABLE TBL_FLOWER_POT;
DROP TABLE TBL_FLOWER;

CREATE TABLE TBL_FLOWER(
   NAME VARCHAR2(255) NOT NULL,
   COLOR VARCHAR2(255) NOT NULL,
   PRICE NUMBER DEFAULT 0,
   CONSTRAINT PK_FLOWER PRIMARY KEY(NAME, COLOR)
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   COLOR VARCHAR2(255) NOT NULL,
   SHAPE VARCHAR2(255) NOT NULL,
   FLOWER_NAME VARCHAR2(255) NOT NULL,
   FLOWER_COLOR VARCHAR2(255) NOT NULL,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_NAME, FLOWER_COLOR)
   REFERENCES TBL_FLOWER(NAME, COLOR)
);*/
CREATE TABLE TBL_MEMBER (
    ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
    MEMBER_NAME VARCHAR2(1000) NOT NULL,
    MEMBER_DEPARTMENT_ID NUMBER NOT NULL,
    CONSTRAINT FK_MEMBER_DEPARTMENT FOREIGN KEY (MEMBER_DEPARTMENT_ID)
    REFERENCES TBL_DEPARTMENT(ID)
);

CREATE TABLE TBL_DEPARTMENT (
    ID NUMBER CONSTRAINT PK_DEPARTMENT PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(1000) NOT NULL,
    DEPARTMENT_COUNT NUMBER NOT NULL
);

CREATE TABLE TBL_PROJECT (
    MEMBER_ID NUMBER NOT NULL,
    PROJECT_CODE VARCHAR2(1000) NOT NULL,
    SALARY NUMBER NOT NULL,
    CONSTRAINT PK_PROJECT PRIMARY KEY (MEMBER_ID, PROJECT_CODE),
    CONSTRAINT FK_PROJECT_MEMBER FOREIGN KEY (MEMBER_ID)
    REFERENCES TBL_MEMBER(ID)
);















