CREATE TABLE TBL_STUDENT(
   ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
   STUDENT_NAME VARCHAR2(255) NOT NULL
);

/*TBL_STUDENT 테이블에서 ID와 STUDENT_NAME 전체 조회*/
SELECT ID, STUDENT_NAME FROM TBL_STUDENT;

INSERT INTO TBL_STUDENT (ID, STUDENT_NAME)
VALUES(1, '한동석');

UPDATE TBL_STUDENT 
SET STUDENT_NAME = '홍길동'
WHERE ID = 1;

DELETE FROM TBL_STUDENT
WHERE ID = 1;
/**********************************************************************/
CREATE TABLE TBL_ZOO(
   ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
   ZOO_NAME VARCHAR2(255),
   ZOO_ADDRESS VARCHAR2(255),
   ZOO_ADDRESS_DETAIL VARCHAR2(255),
   ZOO_MAX_ANIMAL NUMBER DEFAULT 0
);

CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   ANIMAL_NAME VARCHAR2(255),
   ANIMAL_TYPE VARCHAR2(255),
   ANIMAL_AGE NUMBER DEFAULT 0,
   ANIMAL_HEIGHT NUMBER(16, 5),
   ANIMAL_WEIGHT NUMBER(16, 5),
   ZOO_ID NUMBER,
   CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
   REFERENCES TBL_ZOO(ID)
);

ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_HEIGHT NUMBER(16, 5));
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_WEIGHT NUMBER(16, 5));

/*시퀀스를 직접 만들어서 사용해야 한다.*/
CREATE SEQUENCE SEQ_ZOO;

SELECT * FROM TBL_ZOO;

/*INSERT INTO TBL_ZOO(ID, ZOO_NAME, ZOO_ADDRESS, ZOO_ADDRESS_DETAIL, ZOO_MAX_ANIMAL)
VALUES(SEQ_ZOO.NEXTVAL, '서울랜드', '서울', '랜드', 100);*/
INSERT INTO TBL_ZOO
VALUES(SEQ_ZOO.NEXTVAL, '애버랜드', '경기도', '용인', 500);

SELECT ID, ZOO_NAME, ZOO_ADDRESS, ZOO_ADDRESS_DETAIL, ZOO_MAX_ANIMAL FROM TBL_ZOO;

UPDATE TBL_ZOO
SET ZOO_MAX_ANIMAL = 5000
WHERE ZOO_NAME = '애버랜드';

DELETE FROM TBL_ZOO
WHERE ID = 1;

CREATE SEQUENCE SEQ_ANIMAL;

SELECT * FROM TBL_ANIMAL;

INSERT INTO TBL_ANIMAL
VALUES(SEQ_ANIMAL.NEXTVAL, '사자', '맹수', 3, 87.5, 70.789, 2);

INSERT INTO TBL_ANIMAL
VALUES(SEQ_ANIMAL.NEXTVAL, '악어', '도마뱀', 12, 300.5, 180.789, 2);

/*애버랜드(2) 동물원의 동물만 조회*/
SELECT ID, ANIMAL_NAME, ANIMAL_TYPE, ANIMAL_AGE, ANIMAL_HEIGHT, ANIMAL_WEIGHT, ZOO_ID 
FROM TBL_ANIMAL
WHERE ZOO_ID = 2;

/**********************************************************************/
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(255) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_DATE DATE DEFAULT CURRENT_TIMESTAMP,
   MEMBER_ID NUMBER,
   PRODUCT_ID NUMBER,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*각 테이블에 3개 이상씩 정보를 추가하고, 조회한다.*/
CREATE SEQUENCE SEQ_MEMBER;
SELECT * FROM TBL_MEMBER;
SELECT TO_DATE('2000-12-04', 'YYYY-MM-DD') FROM DUAL;
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL,'LJM','1234','이지민','구리','ljm21252@naver.com','000602');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL,'YHJ','1224','용호중','원주','yhj21252@naver.com','000814');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL,'HDS','1234','한동석','남양주','hds21252@naver.com','001204');

CREATE  SEQUENCE SEQ_PRODUCT;
SELECT * FROM TBL_PRODUCT;
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '노트북',1000000,10);

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '아이패드',2000000,20);

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '맥북',3000000,1);

CREATE  SEQUENCE SEQ_ORDER;

SELECT *FROM TBL_ORDER;
INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '240731',1,1);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '240531',2,3);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, '231202',3,1);

/*수정 2회*/
UPDATE TBL_MEMBER 
SET MEMBER_ADDRESS = '서울'
WHERE MEMBER_NAME = '한동석';

UPDATE TBL_MEMBER 
SET MEMBER_ADDRESS = '서울'
WHERE MEMBER_NAME = '용호중';

SELECT * FROM TBL_MEMBER;

UPDATE TBL_PRODUCT
SET PRODUCT_STOCK = 200
WHERE PRODUCT_NAME = '아이패드';

UPDATE TBL_PRODUCT
SET PRODUCT_PRICE = 500000000
WHERE PRODUCT_NAME = '맥북';

SELECT * FROM TBL_PRODUCT;

UPDATE TBL_ORDER 
SET ORDER_DATE = '220602'
WHERE PRODUCT_ID = 1;

UPDATE TBL_ORDER 
SET ORDER_DATE = '240602'
WHERE PRODUCT_ID = 2;

SELECT * FROM TBL_ORDER;

/*삭제 2회*/

DELETE FROM TBL_ORDER
WHERE ID = 1;

DELETE FROM TBL_ORDER
WHERE ID = 2;

DELETE FROM TBL_MEMBER
WHERE MEMBER_NAME = '이지민';

DELETE FROM TBL_MEMBER
WHERE MEMBER_NAME = '용호중';

DELETE FROM TBL_PRODUCT
WHERE PRODUCT_NAME = '맥북';

DELETE FROM TBL_PRODUCT
WHERE PRODUCT_NAME = '아이패드';

/**********************************************************************/
CREATE SEQUENCE SEQ_OWNER;
CREATE SEQUENCE SEQ_PET;

CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(255) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(255) NOT NULL,
   OWNER_ADDRESS VARCHAR2(255)
);

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_ILL_NAME VARCHAR2(255),
   PET_NAME VARCHAR2(255),
   PET_AGE NUMBER,
   WEIGHT NUMBER(4, 2),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '한동석', 20, '01012341234', '경기도');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '홍길동', 37, '01087879898', '서울');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '이순신', 50, '01044445555', '대구');

SELECT ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS 
FROM TBL_OWNER;

INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '장염', '뽀삐', 4, 10.45, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '감기', '달구', 12, 14.25, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '탈골', '댕댕', 7, 8.46, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '염좌', '쿠키', 11, 5.81, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '충치', '바둑', 1, 3.47, 1);

SELECT ID, PET_ILL_NAME, PET_NAME, PET_AGE, WEIGHT, OWNER_ID
FROM TBL_PET;

/*몸무게가 8kg 미만인 반려동물들의 주인에게 모두 전화를 해야한다*/
SELECT PET_ILL_NAME, PET_NAME, WEIGHT, OWNER_ID, TBL_OWNER.OWNER_NAME, TBL_OWNER.OWNER_PHONE
FROM TBL_OWNER  JOIN TBL_PET 
ON TBL_OWNER.ID = TBL_PET.ID AND WEIGHT < 8;

/*이순신이 키우는 반려동물의 병명을 조회한다. */
SELECT PET_ILL_NAME, PET_NAME, TBL_OWNER.OWNER_NAME, TBL_OWNER.OWNER_PHONE
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.ID AND TBL_OWNER.OWNER_NAME = '이순신';


/*나이가 5살보다 많은 반려동물의 주인 전체 정보를 조회한다.*/
SELECT PET_AGE, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS 
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.ID AND TBL_PET.PET_AGE > 5;


/*AS: 알리아스(별칭)
 * 테이블명 혹은 컬럼명 뒤에 AS를 붙여서 원하는 이름을 설정할 수 있다.
 * 이후부터는 설정한 이름으로 사용하면 된다.
 * SELECT절에는 AS를 작성해도 괜찮지만, FROM절에서는 AS를 작성하면 안된다.
 * 이럴 때에는 AS자리에 띄어스기 후 작성하도록 한다.
 * 
 * */

SELECT P.PET_AGE, O.*
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.ID AND P.PET_AGE > 5;

/*CONCATENATION : 연결
 * 
 *"안" + "녕" -> JAVA
 *'안' || '녕' -> Oracal
 * 
 * */

/*LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * WHERE OWNER_NAME LIKE '바보%' <- 바보로 시작하는 모든 것
 * 
 *  %: 모든 것
 *  _: 글자 수
 * 
 * 예시
 * '%A' : A로 끝나는 모든 값
 * 'A%' : A로 시작하는 모든 값
 * 'A__': A로 시작하면서 3글자인 값
 * '_A': A로 끝나면서 2글자인 값
 * '%A%' : A가 포함된 모든 값
 * */
/*반려동물 이름에서 '뽀'가 포함된 반려동물의 주인 정보 조회*/
SELECT O.*
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.ID AND P.PET_NAME LIKE '%뽀%';

SELECT * FROM TBL_PET;
SELECT * FROM TBL_OWNER;

/*핸드폰 번호에 '0101234'로 시작하는 주인의 반려동물 전체 조회*/
SELECT P.*
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.ID AND O.OWNER_PHONE LIKE '0101234%';

/*반려동물 병명에 '염'이 들어가있지 않는 반려동물 전체 정보 조회*/
SELECT P.*
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.ID AND P.PET_ILL_NAME NOT LIKE '%염%';









